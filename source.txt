=======
netlify/functions//ai.js
const { createClient } = require('@supabase/supabase-js');
const { getSessionToken } = require('../../utils/getSessionToken'); // ✅ Use shared utility
const { CORS_HEADERS } = require('../../utils/CORS_HEADERS');

// Debug flag
const DEBUG = true;

exports.handler = async (event) => {
  if (DEBUG) console.log("Handler invoked");

  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    if (DEBUG) console.log("Supabase environment variables not set");
    return {
      statusCode: 500,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify({ error: "Supabase environment variables not set" }),
    };
  }

  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  // Handle OPTIONS preflight requests
  if (event.httpMethod === "OPTIONS") {
    if (DEBUG) console.log("OPTIONS request received");
    return {
      statusCode: 204,
      headers: { ...CORS_HEADERS(event) },
      body: "",
    };
  }

  // ✅ Get session token securely
  const sessionToken = getSessionToken(event);
  if (!sessionToken) {
    if (DEBUG) console.log("No session token found");
    return {
      statusCode: 401,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify({ error: "Unauthorized" }),
    };
  }

  // ✅ Securely retrieve user from Supabase
  const { data: user, error } = await supabase.auth.getUser(sessionToken);
  if (error || !user) {
    if (DEBUG) console.log("Invalid session token");
    return {
      statusCode: 401,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify({ error: "Invalid session token" }),
    };
  }

  const userId = user.id; // ✅ Secure user ID extraction

  // ✅ Extract the path
  const path = event.rawPath.replace('/.netlify/functions/ai', ''); // More robust path extraction

  if (event.httpMethod === "POST") {
    if (path === '/generate-criteria') {
      try {
        const { concept } = JSON.parse(event.body);
        if (DEBUG) console.log("Generating criteria for:", concept);

        // Placeholder response (replace with actual AI logic)
        return {
          statusCode: 200,
          headers: { ...CORS_HEADERS(event) },
          body: JSON.stringify({ criteria: [`Criteria 1 for ${concept}`, `Criteria 2 for ${concept}`] }),
        };
      } catch (error) {
        console.error("Error processing request:", error);
        if (DEBUG) console.log("Error processing request:", error);
        return {
          statusCode: 400,
          headers: { ...CORS_HEADERS(event) },
          body: JSON.stringify({ error: "Invalid request data" }),
        };
      }
    } 

    else if (path === '/evaluate-alternative') {
      try {
        const { alternative, criteria } = JSON.parse(event.body);
        if (DEBUG) console.log("Evaluating alternative:", alternative, "with criteria:", criteria);

        let totalScore = 0;
        for (const criterion of criteria) {
          if (criterion.score < 1 || criterion.score > 5 || criterion.weight < 1 || criterion.weight > 10) {
            if (DEBUG) console.log("Invalid criterion:", criterion);
            return {
              statusCode: 400,
              headers: { ...CORS_HEADERS(event) },
              body: JSON.stringify({ error: `Invalid criterion: ${criterion.name}` }),
            };
          }
          totalScore += criterion.score * criterion.weight;
        }

        return {
          statusCode: 200,
          headers: { ...CORS_HEADERS(event) },
          body: JSON.stringify({ evaluation: totalScore }),
        };
      } catch (error) {
        console.error("Error processing request:", error);
        if (DEBUG) console.log("Error processing request:", error);
        return {
          statusCode: 400,
          headers: { ...CORS_HEADERS(event) },
          body: JSON.stringify({ error: "Invalid request data" }),
        };
      }
    } 

    else if (path === '/predict-scores') {
      try {
        const { alternative, newCriteria, existingCriteria } = JSON.parse(event.body);
        if (DEBUG) console.log("Predicting scores for:", alternative, "with new criteria:", newCriteria, "and existing criteria:", existingCriteria);

        // Placeholder response (replace with actual AI logic)
        return {
          statusCode: 200,
          headers: { ...CORS_HEADERS(event) },
          body: JSON.stringify({ prediction: `Prediction for ${alternative} with new criteria ${newCriteria.join(', ')} and existing criteria ${existingCriteria.join(', ')}` }),
        };
      } catch (error) {
        console.error("Error processing request:", error);
        if (DEBUG) console.log("Error processing request:", error);
        return {
          statusCode: 400,
          headers: { ...CORS_HEADERS(event) },
          body: JSON.stringify({ error: "Invalid request data" }),
        };
      }
    } 

    else {
      if (DEBUG) console.log("Endpoint not found");
      return {
        statusCode: 404,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ error: "Endpoint not found" }),
      };
    }
  }

  if (DEBUG) console.log("Method not allowed");
  return {
    statusCode: 405,
    headers: { ...CORS_HEADERS(event) },
    body: JSON.stringify({ error: "Method Not Allowed" }),
  };
};

netlify/functions//session.js
const { createClient } = require("@supabase/supabase-js");
const { CORS_HEADERS } = require("../../utils/CORS_HEADERS");
const { getSessionToken } = require("../../utils/getSessionToken");

// Debug flag
const DEBUG = true;

exports.handler = async (event) => {
  if (DEBUG) {
    console.log("Handler invoked");
    console.log("Event:", event);
  }

  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    if (DEBUG) console.log("Supabase environment variables not set");
    return {
      statusCode: 500,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify({ error: "Supabase environment variables not set" }),
    };
  }

  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  // Handle OPTIONS preflight requests
  if (event.httpMethod === "OPTIONS") {
    if (DEBUG) console.log("OPTIONS request received");
    return {
      statusCode: 204,
      headers: { ...CORS_HEADERS(event) },
      body: "",
    };
  }

 if (event.httpMethod === "GET") {
    try {
      const sessionToken = getSessionToken(event);

      if (!sessionToken) {
        if (DEBUG) console.log("No session token found");
        return {
          statusCode: 401,
          headers: { ...CORS_HEADERS(event) },
          body: JSON.stringify({ error: "No session token found" }),
        };
      }

      if (DEBUG) console.log('Received Authorization header:', event.headers.Authorization);

      const {
        data: { user },
        error,
      } = await supabase.auth.getUser(sessionToken);
      if (DEBUG) console.log("Supabase user:", user);

      if (error || !user) {
        if (DEBUG) console.log("Supabase error:", error);
        return {
          statusCode: 401,
          headers: { ...CORS_HEADERS(event) },
          body: JSON.stringify({
            error: error ? error.message : "No user found",
          }),
        };
      }

      const response = {
        statusCode: 200,
        headers: {
          ...CORS_HEADERS(event),
        },
        body: JSON.stringify({ user }),
      };
      if (DEBUG) console.log("Complete Session response:", response);
      return response;
    } catch (error) {
      console.error("Error:", error);
      return {
        statusCode: 500,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ error: "Failed to retrieve user data." }),
      };
    }
  }

  if (DEBUG) console.log("Method not allowed");
  return {
    statusCode: 405,
    headers: { ...CORS_HEADERS(event) },
    body: JSON.stringify({ error: "Method Not Allowed" }),
  };
};

netlify/functions//criteria.js
const { createClient } = require("@supabase/supabase-js");
const { CORS_HEADERS } = require("../../utils/CORS_HEADERS");
const { getSessionToken } = require("../../utils/getSessionToken");

// Debug flag
const DEBUG = true;

exports.handler = async (event) => {
  if (DEBUG) console.log("Handler invoked");

  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    if (DEBUG) console.log("Supabase environment variables not set");
    return {
      statusCode: 500,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify({ error: "Supabase environment variables not set" }),
    };
  }

  const supabase = createClient(supabaseUrl, supabaseAnonKey);

    // Get authenticated user ID from request context
    const userId = event.headers.userId;
    if (DEBUG) console.log("Authenticated user ID:", userId);

    if (!userId) {
        return {
            statusCode: 401,
            headers: { ...CORS_HEADERS(event) },
            body: JSON.stringify({ error: "Unauthorized" }),
        };
    }

  // Handle OPTIONS preflight requests
  if (event.httpMethod === "OPTIONS") {
    if (DEBUG) console.log("OPTIONS request received");
    return {
      statusCode: 204,
      headers: { ...CORS_HEADERS(event) },
      body: "",
    };
  }

  // Handle the GET request
  if (event.httpMethod === "GET") {
    try {
      if (DEBUG) console.log("GET request received");

      // Get project ID from query parameters
      const projectId = event.queryStringParameters?.projectId;
      if (!projectId) {
        throw new Error("Project ID is required in query parameters");
      }

      // Fetch criteria for the project
      const { data: criteria, error } = await supabase
        .from("criteria")
        .select("*")
        .eq({project_id: projectId, user_id: userId});

      if (error) {
        throw error;
      }

      return {
        statusCode: 200,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify(criteria),
      };
    } catch (error) {
      console.error("Error:", error.message);
      if (DEBUG) console.log("Error:", error.message);
      return {
        statusCode: error.message.startsWith("Unauthorized") ? 401 : 500,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ error: error.message }),
      };
    }
  }

  // Handle the POST request
  if (event.httpMethod === "POST") {
    try {
      if (DEBUG) console.log("POST request received");

      // Parse request body
      const { project_id, criteria } = JSON.parse(event.body);

      // Validate required fields
      if (!project_id) {
        throw new Error("Project ID is required in body");
      }
      if (!criteria || !Array.isArray(criteria)) {
        throw new Error("Invalid request body: project_id and criteria array are required");
      }

      // Insert criteria
      const { data: insertedCriteria, error } = await supabase
        .from("criteria")
        .insert(criteria.map(criterion => ({ ...criterion, project_id, user_id: userId }))) // Add user_id
        .select();

      if (error) {
        throw error;
      }

      return {
        statusCode: 201,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify(insertedCriteria),
      };
    } catch (error) {
      console.error("Error:", error.message);
      if (DEBUG) console.log("Error:", error.message);
      return {
        statusCode: error.message.startsWith("Unauthorized") ? 401 : 500,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ error: error.message }),
      };
    }
  }

  // Handle the PUT request
  if (event.httpMethod === "PUT") {
    try {
      if (DEBUG) console.log("PUT request received");

      // Get criterion ID from path parameters
      const criterionId = event.pathParameters?.id;
      if (!criterionId) {
        throw new Error("Criterion ID is required in path");
      }

      // Parse request body
      const updates = JSON.parse(event.body);

      // Update criterion
      const { data: updatedCriterion, error } = await supabase
        .from("criteria")
        .update(updates)
        .eq({id: criterionId, user_id: userId})
        .select()
        .single();

      if (error) {
        throw error;
      }

      return {
        statusCode: 200,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify(updatedCriterion),
      };
    } catch (error) {
      console.error("Error:", error.message);
      if (DEBUG) console.log("Error:", error.message);
      return {
        statusCode: error.message.startsWith("Unauthorized") ? 401 : 500,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ error: error.message }),
      };
    }
  }

  // Handle the DELETE request
  if (event.httpMethod === "DELETE") {
    try {
      if (DEBUG) console.log("DELETE request received");

      // Get criterion ID from path parameters
      const criterionId = event.pathParameters?.id;
      if (!criterionId) {
        throw new Error("Criterion ID is required in path");
      }

      // Delete criterion
      const { error } = await supabase
        .from("criteria")
        .delete()
        .eq({id: criterionId, user_id: userId});

      if (error) {
        throw error;
      }

      return {
        statusCode: 200,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ message: "Criterion deleted successfully" }),
      };
    } catch (error) {
      console.error("Error:", error.message);
      if (DEBUG) console.log("Error:", error.message);
      return {
        statusCode: error.message.startsWith("Unauthorized") ? 401 : 500,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ error: error.message }),
      };
    }
  }

  // Default response for unsupported methods
  if (DEBUG) console.log("Method not allowed");
  return {
    statusCode: 405,
    headers: { ...CORS_HEADERS(event) },
    body: JSON.stringify({ error: "Method Not Allowed" }),
  };
};

netlify/functions//hello.js
// Debug flag
const DEBUG = true;

exports.handler = async () => {
  if (DEBUG) console.log("Handler invoked");
  return {
    statusCode: 200,
    body: "Hello"
  };
};

netlify/functions//signin.js
const { createClient } = require("@supabase/supabase-js");
const cookie = require("cookie");
const { CORS_HEADERS } = require("../../utils/CORS_HEADERS");

exports.handler = async (event) => {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    return {
      statusCode: 500,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify({ error: "Supabase environment variables not set" }),
    };
  }

  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  if (event.httpMethod === "OPTIONS") {
    return {
      statusCode: 204,
      headers: { ...CORS_HEADERS(event) },
      body: "",
    };
  }

  if (event.httpMethod === "POST") {
    try {
      const { email, password } = JSON.parse(event.body);

      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        return {
          statusCode: error.status || 500,
          headers: { ...CORS_HEADERS(event) },
          body: JSON.stringify({ error: error.message || "Supabase signin error" }),
        };
      }

      const cookieString = cookie.serialize("sb-auth-token", data.session.access_token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "None",
        maxAge: data.session.expires_in,
        path: "/",
      });

      return {
        statusCode: 200,
        headers: {
          ...CORS_HEADERS(event),
          "Set-Cookie": cookieString,
        },
        body: JSON.stringify({
          message: "Sign in successful",
          user: { email: data.user.email, id: data.user.id },
        }),
      };
    } catch (error) {
      return {
        statusCode: 400,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ error: "Invalid request" }),
      };
    }
  }

  return {
    statusCode: 405,
    headers: { ...CORS_HEADERS(event) },
    body: JSON.stringify({ error: "Method Not Allowed" }),
  };
};

netlify/functions//signup.js
const { createClient } = require("@supabase/supabase-js");
const cookie = require("cookie");
const { CORS_HEADERS } = require("../../utils/CORS_HEADERS");

exports.handler = async (event) => {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    return {
      statusCode: 500,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify({ error: "Supabase environment variables not set" }),
    };
  }

  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  if (event.httpMethod === "OPTIONS") {
    return {
      statusCode: 204,
      headers: { ...CORS_HEADERS(event) },
      body: "",
    };
  }

  if (event.httpMethod === "POST") {
    try {
      const { email, password } = JSON.parse(event.body);

      if (!email || !password) {
        return {
          statusCode: 400,
          headers: { ...CORS_HEADERS(event) },
          body: JSON.stringify({ error: "Email and password are required" })
        };
      }

      const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
        email,
        password,
      });

      if (signUpError) {
        console.error("Supabase signup error:", signUpError);
        return {
          statusCode: signUpError.status || 500,
          headers: { ...CORS_HEADERS(event) },
          body: JSON.stringify({ error: signUpError.message || "Supabase signup error" }),
        };
      }

      // Remove automatic sign-in after signup
      // TODO: Revisit cookie setting - should we set a cookie on signup?
      // const cookieString = ...

      return {
        statusCode: 200,
        headers: {
          ...CORS_HEADERS(event),
          // "Set-Cookie": cookieString, // Removed cookie setting for now
        },
        body: JSON.stringify({
          message: "Sign up successful",
          user: { email: signUpData.user.email, id: signUpData.user.id }, // Return only essential user data
        }),
      };
    } catch (error) {
      console.error("Error in signup function:", error);
      return {
        statusCode: 400,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ error: "Invalid JSON in request body" }),
      };
    }
  }

  return {
    statusCode: 405,
    headers: { ...CORS_HEADERS(event) },
    body: JSON.stringify({ error: "Method Not Allowed" }),
  };
};

netlify/functions//signout.js
const cookie = require("cookie");
const { CORS_HEADERS } = require("../../utils/CORS_HEADERS");

exports.handler = async (event) => {
  const cookieString = cookie.serialize("sb-auth-token", "", {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "None",
    expires: new Date(0), // Expire immediately
    path: "/",
  });

  return {
    statusCode: 200,
    headers: {
      ...CORS_HEADERS(event),
      "Set-Cookie": cookieString,
    },
    body: JSON.stringify({ message: "Sign out successful" }),
  };
};

netlify/functions//projects.js
const { createClient } = require("@supabase/supabase-js");
const { CORS_HEADERS } = require("../../utils/CORS_HEADERS");
const { getSessionToken } = require("../../utils/getSessionToken");

// Debug flag
const DEBUG = true;

// Helper function to fetch projects
async function fetchProjects(supabase, userId, projectId = null) {
  if (DEBUG) console.log("Fetching projects for user:", userId, "Project ID:", projectId);

    let query = supabase.from("projects").select("*").eq("created_by", userId);

    if (projectId) {
      query = query.eq("id", projectId).single();
    }


  try {
    const { data, error } = await query;

    if (error) {
      throw error;
    }
    if (DEBUG) console.log("Fetched projects:", data);
    return data
  }
    catch (error) {
        console.error("Error fetching project(s):", error);
        throw error;
    }
}

// Helper function to create project
async function createProject(supabase, userId, payload) {
  if (DEBUG) console.log("Creating project for user:", userId, "Payload:", payload);

  const { data, error } = await supabase
    .from("projects")
    .insert({ ...payload, created_by: userId })
    .select()
    .single();

  if (error) {
    throw error;
  }

  if (DEBUG) console.log("Project created:", data);
  return data;
}

// Helper function to update project
async function updateProject(supabase, userId, projectId, payload) {
  if (DEBUG) console.log("Updating project:", projectId, "for user:", userId, "Payload:", payload);

  const { data, error } = await supabase
    .from("projects")
    .update(payload)
    .eq("id", projectId)
    .eq("created_by", userId)
    .select()
    .single();

  if (error) {
    throw error;
  }

  if (DEBUG) console.log("Project updated:", data);
  return data;
}

// Helper function to delete project
async function deleteProject(supabase, userId, projectId) {
  if (DEBUG) console.log("Deleting project:", projectId, "for user:", userId);

  const { error } = await supabase
    .from("projects")
    .delete()
    .eq("id", projectId)
    .eq("created_by", userId);

  if (error) {
    throw error;
  }

  if (DEBUG) console.log("Project deleted successfully");
  return { message: "Project deleted successfully" };
}

exports.handler = async (event) => {
  try {
    if (DEBUG) {
      console.log("Received", event.httpMethod, "request with path:", event.path);
      console.log("Request body:", event.body);
    }

    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

    if (!supabaseUrl || !supabaseAnonKey) {
      throw new Error("Supabase environment variables not set");
    }

    const supabase = createClient(supabaseUrl, supabaseAnonKey);

    // Get authenticated user ID from request context
    const userId = event.headers.userId;
    if (DEBUG) console.log("Authenticated user ID:", userId);
    if (!userId) {
      throw new Error("Unauthorized: User ID not found in request headers");
    };

    // Get project ID from path parameters if present
    const projectId = event.pathParameters?.id;
    if (projectId) console.log("Project ID from path parameters:", projectId);

    let responseData;

    // Handle different HTTP methods
    switch (event.httpMethod) {
      case "OPTIONS":
        return {
          statusCode: 204,
          headers: { ...CORS_HEADERS(event) },
          body: "",
        };

      case "GET":
        responseData = await fetchProjects(supabase, userId, projectId);
        break;

      case "POST":
        const createPayload = JSON.parse(event.body);
        if (!createPayload.title) {
          throw new Error("Project title is required");
        }
        responseData = await createProject(supabase, userId, createPayload);
        break;

      case "PUT":
        if (!projectId) {
          throw new Error("Project ID is required in path");
        }
        const updatePayload = JSON.parse(event.body);
        responseData = await updateProject(supabase, userId, projectId, updatePayload);
        break;

      case "DELETE":
        if (!projectId) {
          throw new Error("Project ID is required in path");
        }
        responseData = await deleteProject(supabase, userId, projectId);
        break;

      default:
        throw new Error("Method not allowed");
    }

    if (DEBUG) console.log("Response data:", responseData);

    return {
      statusCode: event.httpMethod === "POST" ? 201 : 200,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify(responseData || { error: "No data returned" }), // Ensure response is never undefined
    };
  } catch (error) {
    console.error("Error:", error.message);
    if (DEBUG) console.log("Error:", error.message);
    return {
      statusCode: error.message.startsWith("Unauthorized") ? 401 : 500,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify({ error: error.message }),
    };
  }
};

netlify/functions//choices.js
const { createClient } = require("@supabase/supabase-js");
const { CORS_HEADERS } = require("../../utils/CORS_HEADERS");
const { getSessionToken } = require("../../utils/getSessionToken");

// Debug flag
const DEBUG = true;

exports.handler = async (event) => {
  if (DEBUG) console.log("Handler invoked");

  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    if (DEBUG) console.log("Supabase environment variables not set");
    return {
      statusCode: 500,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify({ error: "Supabase environment variables not set" }),
    };
  }

  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  // Get authenticated user ID from request context
  const userId = event.headers.userId;
  if (DEBUG) console.log("Authenticated user ID:", userId);

  if (!userId) {
    return {
      statusCode: 401,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify({ error: "Unauthorized" }),
    };
  }

  // Handle OPTIONS preflight requests
  if (event.httpMethod === "OPTIONS") {
    if (DEBUG) console.log("OPTIONS request received");
    return {
      statusCode: 204,
      headers: { ...CORS_HEADERS(event) },
      body: "",
    };
  }

  // Handle the GET request
  if (event.httpMethod === "GET") {
    try {
      if (DEBUG) console.log("GET request received");

      // Get project ID from query parameters
      const projectId = event.queryStringParameters?.projectId;
      if (!projectId) {
        throw new Error("Project ID is required in query parameters");
      }

      // Fetch choices for the project
      const { data: choices, error } = await supabase
        .from("choices")
        .select("*")
        .eq({project_id: projectId, user_id: userId});

      if (error) {
        throw error;
      }

      return {
        statusCode: 200,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify(choices),
      };
    } catch (error) {
      console.error("Error:", error.message);
      if (DEBUG) console.log("Error:", error.message);
      return {
        statusCode: error.message.startsWith("Unauthorized") ? 401 : 500,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ error: error.message }),
      };
    }
  }

  // Handle the POST request
  if (event.httpMethod === "POST") {
    try {
      if (DEBUG) console.log("POST request received");

      // Parse request body
      const { project_id, choices } = JSON.parse(event.body);

      // Validate required fields
      if (!project_id) {
        throw new Error("Project ID is required in body");
      }
      if (!choices || !Array.isArray(choices)) {
        throw new Error(
          "Invalid request body: project_id and choices array are required"
        );
      }

      // Insert choices
      const { data: insertedChoices, error } = await supabase
        .from("choices")
        .insert(
          choices.map((choice) => ({ ...choice, project_id, user_id: userId }))
        ) // Add user_id
        .select();

      if (error) {
        throw error;
      }

      return {
        statusCode: 201,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify(insertedChoices),
      };
    } catch (error) {
      console.error("Error:", error.message);
      if (DEBUG) console.log("Error:", error.message);
      return {
        statusCode: error.message.startsWith("Unauthorized") ? 401 : 500,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ error: error.message }),
      };
    }
  }

  // Handle the PUT request
  if (event.httpMethod === "PUT") {
    try {
      if (DEBUG) console.log("PUT request received");

      // Get choice ID from path parameters
      const choiceId = event.pathParameters?.id;
      if (!choiceId) {
        throw new Error("Choice ID is required in path parameters");
      }

      // Parse request body
      const updates = JSON.parse(event.body);

      // Update choice
      const { data: updatedChoice, error } = await supabase
        .from("choices")
        .update(updates)
        .eq({id: choiceId, user_id: userId}) // Add user_id check
        .select()
        .single();

      if (error) {
        throw error;
      }

      return {
        statusCode: 200,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify(updatedChoice),
      };
    } catch (error) {
      console.error("Error:", error.message);
      if (DEBUG) console.log("Error:", error.message);
      return {
        statusCode: error.message.startsWith("Unauthorized") ? 401 : 500,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ error: error.message }),
      };
    }
  }

  // Handle the DELETE request
  if (event.httpMethod === "DELETE") {
    try {
      if (DEBUG) console.log("DELETE request received");

      // Get choice ID from path parameters
      const choiceId = event.pathParameters?.id;
      if (!choiceId) {
        throw new Error("Choice ID is required in path parameters");
      }

      // Delete choice
      const { error } = await supabase
        .from("choices")
        .delete()
        .eq({id: choiceId, user_id: userId}); // Add user_id check

      if (error) {
        throw error;
      }

      return {
        statusCode: 200,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ message: "Choice deleted successfully" }),
      };
    } catch (error) {
      console.error("Error:", error.message);
      if (DEBUG) console.log("Error:", error.message);
      return {
        statusCode: error.message.startsWith("Unauthorized") ? 401 : 500,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ error: error.message }),
      };
    }
  }

  // Default response for unsupported methods
  if (DEBUG) console.log("Method not allowed");
  return {
    statusCode: 405,
    headers: { ...CORS_HEADERS(event) },
    body: JSON.stringify({ error: "Method Not Allowed" }),
  };
};

netlify/functions//scores.js
const { createClient } = require("@supabase/supabase-js");
const { CORS_HEADERS } = require("../../utils/CORS_HEADERS");
const { getSessionToken } = require("../../utils/getSessionToken");

// Debug flag
const DEBUG = true;

exports.handler = async (event) => {
  if (DEBUG) console.log("Handler invoked");

  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    if (DEBUG) console.log("Supabase environment variables not set");
    return {
      statusCode: 500,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify({ error: "Supabase environment variables not set" }),
    };
  }

  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  // Get authenticated user ID from request context
  const userId = event.headers.userId;
  if (DEBUG) console.log("Authenticated user ID:", userId);

  if (!userId) {
    return {
      statusCode: 401,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify({ error: "Unauthorized" }),
    };
  }

  // Handle OPTIONS preflight requests
  if (event.httpMethod === "OPTIONS") {
    if (DEBUG) console.log("OPTIONS request received");
    return {
      statusCode: 204,
      headers: { ...CORS_HEADERS(event) },
      body: "",
    };
  }

  // Handle the PUT request
  if (event.httpMethod === "PUT") {
    try {
      if (DEBUG) console.log("PUT request received");

      // Parse request body
      const { criteria_id, choice_id, score } = JSON.parse(event.body);

      // Validate required fields.  Note: userId is already validated above
      if (!criteria_id || !choice_id || typeof score !== 'number') {
        throw new Error("Invalid request body: criteria_id, choice_id, and score are required");
      }
    
      // Validate score range
      if (score < 1 || score > 5) {
        throw new Error("Invalid score: Score must be between 1 and 5");
      }

      // Update or insert score
      const { data: updatedScore, error } = await supabase
        .from("scores")
        .upsert({
          criteria_id,
          choice_id,
          score,
          user_id: userId, // Use the authenticated userId
        })
        .select()
        .single();

      if (error) {
        throw error;
      }

      return {
        statusCode: 200,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify(updatedScore),
      };
    } catch (error) {
      console.error("Error:", error.message);
      if (DEBUG) console.log("Error:", error.message);
      return {
        statusCode: error.message.startsWith("Unauthorized") ? 401 : 500,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ error: error.message }),
      };
    }
  }

  // Default response for unsupported methods
  if (DEBUG) console.log("Method not allowed");
  return {
    statusCode: 405,
    headers: { ...CORS_HEADERS(event) },
    body: JSON.stringify({ error: "Method Not Allowed" }),
  };
};

netlify/functions//admin.js
const { createClient } = require('@supabase/supabase-js');
const { getSessionToken } = require('../../utils/getSessionToken');
const { CORS_HEADERS } = require('../../utils/CORS_HEADERS');

// Debug flag
const DEBUG = true;

exports.handler = async (event) => {
  if (DEBUG) console.log("Handler invoked");

  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;
  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY; // ✅ Secure admin key

  if (!supabaseUrl || !supabaseAnonKey || !serviceRoleKey) {
    if (DEBUG) console.log("Supabase environment variables not set");
    return {
      statusCode: 500,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify({ error: "Supabase environment variables not set" }),
    };
  }

  const supabase = createClient(supabaseUrl, supabaseAnonKey);
  const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey, { auth: { persistSession: false } }); // ✅ Admin client

  // Handle OPTIONS preflight requests
  if (event.httpMethod === "OPTIONS") {
    if (DEBUG) console.log("OPTIONS request received");
    return {
      statusCode: 204,
      headers: { ...CORS_HEADERS(event) },
      body: "",
    };
  }

  // ✅ Get session token securely
  const sessionToken = getSessionToken(event);
  if (!sessionToken) {
    if (DEBUG) console.log("No session token found");
    return {
      statusCode: 401,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify({ error: "Unauthorized" }),
    };
  }

  // ✅ Securely retrieve user from Supabase
  const { data: user, error } = await supabase.auth.getUser(sessionToken);
  if (error || !user) {
    if (DEBUG) console.log("Invalid session token");
    return {
      statusCode: 401,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify({ error: "Invalid session token" }),
    };
  }

  // ✅ Check if the user has an "admin" role
  const { data: userRole, error: roleError } = await supabase
    .from('user_roles')
    .select('role')
    .eq('user_id', user.id)
    .single();

  if (roleError || !userRole || userRole.role !== 'admin') {
    if (DEBUG) console.log("Access denied: Admins only");
    return {
      statusCode: 403,
      headers: { ...CORS_HEADERS(event) },
      body: JSON.stringify({ error: "Access denied: Admins only" }),
    };
  }

  // ✅ Handle GET request - Retrieve users with pagination
  if (event.httpMethod === "GET") {
    try {
      const { limit = 10, offset = 0 } = event.queryStringParameters || {};
      if (DEBUG) console.log("GET request received with limit:", limit, "offset:", offset);

      const { data, error } = await supabase
        .from('users')
        .select('*')
        .range(Number(offset), Number(offset) + Number(limit) - 1);

      if (error) throw error;

      return {
        statusCode: 200,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ users: data }),
      };
    } catch (error) {
      console.error("Error fetching users:", error);
      if (DEBUG) console.log("Error fetching users:", error);
      return {
        statusCode: 500,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ error: "Failed to fetch users" }),
      };
    }
  }

  // ✅ Handle DELETE request - Delete user (admin only)
  if (event.httpMethod === "DELETE") {
    try {
      const { id } = JSON.parse(event.body);
      if (DEBUG) console.log("DELETE request received for user ID:", id);

      if (!id) {
        if (DEBUG) console.log("User ID is required");
        return {
          statusCode: 400,
          headers: { ...CORS_HEADERS(event) },
          body: JSON.stringify({ error: "User ID is required" }),
        };
      }

      const { error } = await supabaseAdmin.auth.admin.deleteUser(id); // ✅ Requires Service Role Key

      if (error) throw error;

      return {
        statusCode: 200,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ message: "User deleted successfully" }),
      };
    } catch (error) {
      console.error("Error deleting user:", error);
      if (DEBUG) console.log("Error deleting user:", error);
      return {
        statusCode: 500,
        headers: { ...CORS_HEADERS(event) },
        body: JSON.stringify({ error: "Failed to delete user" }),
      };
    }
  }

  if (DEBUG) console.log("Method not allowed");
  return {
    statusCode: 405,
    headers: { ...CORS_HEADERS(event) },
    body: JSON.stringify({ error: "Method Not Allowed" }),
  };
};

=======
