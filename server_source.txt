=======
netlify/functions/ai.js
const { createClient } = require('@supabase/supabase-js');

// Helper function to get the session token from cookies
function getSessionToken(event) {
    const cookieString = event.headers.cookie || '';
    const cookies = cookieString.split(';').reduce((acc, cookie) => {
        const [key, value] = cookie.trim().split('=');
        acc[key] = value;
        return acc;
    }, {});

    const projectRef = process.env.SUPABASE_URL.split('.')[0].replace('https://', '');
    const sessionCookieName = `sb-${projectRef}-auth-token`;
    return cookies[sessionCookieName];
}

exports.handler = async (event) => {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    return {
      statusCode: 500,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type, Authorization",
      },
      body: JSON.stringify({ error: "Supabase environment variables not set" }),
    };
  }

  const supabase = createClient(supabaseUrl, supabaseAnonKey);

    if (event.httpMethod === "OPTIONS") {
    return {
      statusCode: 204,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type, Authorization",
      },
      body: "",
    };
  }

  if (event.httpMethod === "POST") {
    const sessionToken = getSessionToken(event);

    if (!sessionToken) {
      return {
        statusCode: 401,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type, Authorization",
        },
        body: JSON.stringify({ error: "Unauthorized" }),
      };
    }

    // Since we cannot use supabase.auth.getUser() without JWT secret, we will
    // just check for the presence of a token and assume it is valid for now.
    // TODO: Implement proper authorization using a custom JWT verifier or a separate auth service.

    const path = event.path.replace('/.netlify/functions/ai', ''); // Extract the path

    if (path === '/generate-criteria') {
      // TODO: Implement generateCriteria logic
      const { concept } = JSON.parse(event.body);
      console.log("concept", concept)

      // Placeholder response
      return {
        statusCode: 200,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type, Authorization",
        },
        body: JSON.stringify({ criteria: [`Criteria 1 for ${concept}`, `Criteria 2 for ${concept}`] }),
      };

    } else if (path === '/evaluate-alternative') {
      // TODO: Implement evaluateAlternative logic.  Criteria should have score (1-5) and weight (1-10)
      const { alternative, criteria } = JSON.parse(event.body);

      let totalScore = 0;
      for (const criterion of criteria) {
        if (criterion.score < 1 || criterion.score > 5) {
          return {
            statusCode: 400,
            headers: {
              "Access-Control-Allow-Origin": "*",
              "Access-Control-Allow-Methods": "POST, OPTIONS",
              "Access-Control-Allow-Headers": "Content-Type, Authorization",
            },
            body: JSON.stringify({ error: `Invalid score for criterion ${criterion.name}: ${criterion.score}` }),
          };
        }
        if (criterion.weight < 1 || criterion.weight > 10) {
          return {
            statusCode: 400,
            headers: {
              "Access-Control-Allow-Origin": "*",
              "Access-Control-Allow-Methods": "POST, OPTIONS",
              "Access-Control-Allow-Headers": "Content-Type, Authorization",
            },
            body: JSON.stringify({ error: `Invalid weight for criterion ${criterion.name}: ${criterion.weight}` }),
          };
        }
        totalScore += criterion.score * criterion.weight;
      }

      return {
        statusCode: 200,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type, Authorization",
        },
        body: JSON.stringify({ evaluation: totalScore }),
      };

    } else if (path === '/predict-scores') {
      // TODO: Implement predictScores logic
      const { alternative, newCriteria, existingCriteria } = JSON.parse(event.body);
      console.log("alternative", alternative)
      console.log("newCriteria", newCriteria)
      console.log("existingCriteria", existingCriteria)

      // Placeholder response
      return {
        statusCode: 200,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type, Authorization",
        },
        body: JSON.stringify({ prediction: `Prediction for ${alternative} with new criteria ${newCriteria.join(', ')} and existing criteria ${existingCriteria.join(', ')}` }),
      };
    } else {
      return {
        statusCode: 404,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type, Authorization",
        },
        body: JSON.stringify({ error: "Endpoint not found" }),
      };
    }
  }

  return {
    statusCode: 405,
    body: JSON.stringify({ error: "Method Not Allowed" }),
  };
};

netlify/functions/session.js
const { createClient } = require('@supabase/supabase-js');

exports.handler = async (event) => {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    return {
      statusCode: 500,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type, Authorization",
      },
      body: JSON.stringify({ error: "Supabase environment variables not set" }),
    };
  }

  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  if (event.httpMethod === "OPTIONS") {
    return {
      statusCode: 204,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type, Authorization",
      },
      body: "",
    };
  }
  
  if (event.httpMethod === "GET") {
    try {
      // Supabase automatically handles session retrieval from cookies in a browser environment.
      // For Netlify functions, we need to manually extract the session from the headers.
      // The cookie name is typically 'sb-[project-ref]-auth-token'.

      const cookieString = event.headers.cookie || '';
      const cookies = cookieString.split(';').reduce((acc, cookie) => {
        const [key, value] = cookie.trim().split('=');
        acc[key] = value;
        return acc;
      }, {});

      const projectRef = supabaseUrl.split('.')[0].replace('https://', '');
      const sessionCookieName = `sb-${projectRef}-auth-token`;
      const sessionToken = cookies[sessionCookieName];

      if (!sessionToken) {
        return {
          statusCode: 401,
          headers: {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type, Authorization",
          },
          body: JSON.stringify({ error: "No session token found" }),
        };
      }

      // The session token is a JWT. Supabase client library can't verify it directly in a serverless function
      // without the JWT secret, which we shouldn't expose.  We'll just return the decoded token.
      // A more secure approach would be to use supabase.auth.getUser() with the token, but this requires
      // the JWT secret, which is not recommended for serverless functions.

      const [header, payload, signature] = sessionToken.split('.');
      const decodedPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf-8'));

      return {
        statusCode: 200,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type, Authorization",
        },
        body: JSON.stringify({ session: decodedPayload }),
      };

    } catch (error) {
      return {
        statusCode: 500,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type, Authorization",
        },
        body: JSON.stringify({ error: "Error retrieving session" }),
      };
    }
  }

  return {
    statusCode: 405,
    body: JSON.stringify({ error: "Method Not Allowed" }),
  };
};

netlify/functions/hello.js
exports.handler = async () => {
  return {
    statusCode: 200,
    body: "Hello"
  };
};

netlify/functions/signin.js
const { createClient } = require('@supabase/supabase-js');
const cookie = require('cookie');

exports.handler = async (event) => {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    return {
      statusCode: 500,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type",
      },
      body: JSON.stringify({ error: "Supabase environment variables not set" }),
    };
  }

  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  if (event.httpMethod === "OPTIONS") {
    return {
      statusCode: 204,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type",
      },
      body: "",
    };
  }

  if (event.httpMethod === "POST") {
    try {
      const { email, password } = JSON.parse(event.body);

      const { data, error } = await supabase.auth.signInWithPassword({ email, password });

      if (error) {
        return {
          statusCode: error.status || 500,
          headers: {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
          },
          body: JSON.stringify({ error: error.message || "Supabase signin error" }),
        };
      }

      const projectRef = supabaseUrl.split('.')[0].replace('https://', '');
      const sessionCookieName = `sb-${projectRef}-auth-token`;

      // Serialize the cookie for setting in the response header
      const cookieString = cookie.serialize(sessionCookieName, data.session.access_token, {
        httpOnly: false, // Allow client-side JavaScript to access the cookie
        secure: false,   // Set to true in production (HTTPS)
        sameSite: 'Strict',
        maxAge: data.session.expires_in, // Use the session's expiration time
        path: '/', // Cookie is valid for all paths
        domain: 'localhost'
      });

      return {
        statusCode: 200,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type",
          'Set-Cookie': cookieString, // Set the cookie
        },
        body: JSON.stringify({
          message: "Sign in successful",
          user: data.user,
          session: data.session,
          projectRef: projectRef,
        }),
      };
    } catch (error) {
      return {
        statusCode: 400,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type"
        },
        body: JSON.stringify({ error: "Invalid JSON in request body" }),
      };
    }
  }

  return {
    statusCode: 405,
    body: JSON.stringify({ error: "Method Not Allowed" }),
  };
};

netlify/functions/signup.js
const { createClient } = require('@supabase/supabase-js');

exports.handler = async (event) => {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    return {
      statusCode: 500,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type",
      },
      body: JSON.stringify({ error: "Supabase environment variables not set" }),
    };
  }

  const supabase = createClient(supabaseUrl, supabaseAnonKey);
  console.log("Supabase client created");

    // Handle the OPTIONS method for preflight requests
  if (event.httpMethod === "OPTIONS") {
    return {
      statusCode: 204, // No Content
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type",
      },
      body: "",
    };
  }

  // Handle the POST request
  if (event.httpMethod === "POST") {
    try {
      // Parse the body of the request
      const { email, password } = JSON.parse(event.body);

      // Log the values to check
      console.log("Email:", email, "Password:", password);

      const { data, error } = await supabase.auth.signUp({ email, password });

      if (error) {
        console.error("Supabase error:", error);
        return {
          statusCode: error.status || 500,
          headers: {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
          },
          body: JSON.stringify({ error: error.message || "Supabase signup error" }),
        };
      }

      return {
        statusCode: 200,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type",
        },
        body: JSON.stringify({
          message: "Sign up successful",
          user: data.user,
        }),
      };
    } catch (error) {
      console.error("Error in signup function:", error);
      return {
        statusCode: 400,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type"
        },
        body: JSON.stringify({ error: "Invalid JSON in request body" }),
      };
    }
  }

  // Default response for unsupported methods
  return {
    statusCode: 405, // Method Not Allowed
    body: JSON.stringify({ error: "Method Not Allowed" }),
  };
};

netlify/functions/signout.js
const { createClient } = require('@supabase/supabase-js');

exports.handler = async (event) => {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    return {
      statusCode: 500,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type",
      },
      body: JSON.stringify({ error: "Supabase environment variables not set" }),
    };
  }

  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  if (event.httpMethod === "OPTIONS") {
    return {
      statusCode: 204,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type",
      },
      body: "",
    };
  }

  if (event.httpMethod === "POST") {
    try {
      const { error } = await supabase.auth.signOut();

      if (error) {
        return {
          statusCode: error.status || 500,
          headers: {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
          },
          body: JSON.stringify({ error: error.message || "Supabase signout error" }),
        };
      }

      return {
        statusCode: 200,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type",
        },
        body: JSON.stringify({ message: "Sign out successful" }),
      };
    } catch (error) {
      return {
        statusCode: 400,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type"
        },
        body: JSON.stringify({ error: "Invalid request" }),
      };
    }
  }

  return {
    statusCode: 405,
    body: JSON.stringify({ error: "Method Not Allowed" }),
  };
};

netlify/functions/projects.js
const { createClient } = require('@supabase/supabase-js');

// Helper function to get the session token from cookies
function getSessionToken(event) {
    const cookieString = event.headers.cookie || '';
    const cookies = cookieString.split(';').reduce((acc, cookie) => {
        const [key, value] = cookie.trim().split('=');
        acc[key] = value;
        return acc;
    }, {});

    const projectRef = process.env.SUPABASE_URL.split('.')[0].replace('https://', '');
    const sessionCookieName = `sb-${projectRef}-auth-token`;
    return cookies[sessionCookieName];
}

exports.handler = async (event) => {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    return {
      statusCode: 500,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type, Authorization",
      },
      body: JSON.stringify({ error: "Supabase environment variables not set" }),
    };
  }

  const supabase = createClient(supabaseUrl, supabaseAnonKey);

    if (event.httpMethod === "OPTIONS") {
    return {
      statusCode: 204,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type, Authorization",
      },
      body: "",
    };
  }

  const sessionToken = getSessionToken(event);
  if (!sessionToken) {
    return {
      statusCode: 401,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type, Authorization",
      },
      body: JSON.stringify({ error: "Unauthorized" }),
    };
  }

    // Since we cannot use supabase.auth.getUser() without JWT secret, we will
    // just check for the presence of a token and assume it is valid for now.
    // TODO: Implement proper authorization using a custom JWT verifier or a separate auth service.
  
  if (event.httpMethod === "GET") {
    // TODO: Fetch projects associated with the user.
    // For now, returning a placeholder.
     try {
        const [header, payload, signature] = sessionToken.split('.');
        const decodedPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf-8'));
        const userId = decodedPayload.sub

        const { data: projects, error } = await supabase
            .from('projects')
            .select('*')
            .eq('user_id', userId);

        if (error) {
            throw error;
        }

      return {
        statusCode: 200,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type, Authorization",
        },
        body: JSON.stringify(projects),
      };
    } catch (error) {
        console.error("Error fetching projects:", error);
        return {
            statusCode: 500,
            headers: {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Authorization",
            },
            body: JSON.stringify({ error: "Failed to fetch projects" }),
        };
    }
  } else if (event.httpMethod === "POST") {
    try {
        const [header, payload, signature] = sessionToken.split('.');
        const decodedPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf-8'));
        const userId = decodedPayload.sub

      const { name, description, criteria } = JSON.parse(event.body);

      // TODO: Validate project data
      if (!name) {
        return {
          statusCode: 400,
          headers: {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type, Authorization",
          },
          body: JSON.stringify({ error: "Project name is required" }),
        };
      }

      const { data: newProject, error } = await supabase
        .from('projects')
        .insert([
          { name, description, criteria, user_id: userId },
        ])
        .select();

      if (error) {
        throw error;
      }

      return {
        statusCode: 201,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type, Authorization",
        },
        body: JSON.stringify(newProject[0]),
      };
    } catch (error) {
      console.error("Error creating project:", error);
      return {
        statusCode: 500,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type, Authorization",
        },
        body: JSON.stringify({ error: "Failed to create project" }),
      };
    }
  }

  return {
    statusCode: 405,
    body: JSON.stringify({ error: "Method Not Allowed" }),
  };
};

netlify/functions/admin.js
const { createClient } = require('@supabase/supabase-js');

exports.handler = async (event) => {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    return {
      statusCode: 500,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS, DELETE",
        "Access-Control-Allow-Headers": "Content-Type",
      },
      body: JSON.stringify({ error: "Supabase environment variables not set" }),
    };
  }

  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  // Handle OPTIONS requests for preflight checks
  if (event.httpMethod === "OPTIONS") {
    return {
      statusCode: 204,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS, DELETE",
        "Access-Control-Allow-Headers": "Content-Type",
      },
      body: "",
    };
  }

  // TODO: Implement authentication and authorization checks here.
  // Only authenticated admins should be able to access these functions.

  if (event.httpMethod === "GET") {
    // List users
    // TODO: Implement pagination
    const { data, error } = await supabase.from('users').select('*'); // Fetch all columns, consider security implications

    if (error) {
      return {
        statusCode: error.status || 500,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS, DELETE",
          "Access-Control-Allow-Headers": "Content-Type",
        },
        body: JSON.stringify({ error: error.message || "Supabase error" }),
      };
    }

    return {
      statusCode: 200,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS, DELETE",
        "Access-Control-Allow-Headers": "Content-Type",
      },
      body: JSON.stringify({ users: data }),
    };
  } else if (event.httpMethod === "DELETE") {
    // Delete user
    const { id } = JSON.parse(event.body);

    if (!id) {
      return {
        statusCode: 400,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS, DELETE",
          "Access-Control-Allow-Headers": "Content-Type",
        },
        body: JSON.stringify({ error: "User ID is required" }),
      };
    }
    
    const { error } = await supabase.auth.admin.deleteUser(id);


    if (error) {
      return {
        statusCode: error.status || 500,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS, DELETE",
          "Access-Control-Allow-Headers": "Content-Type",
        },
        body: JSON.stringify({ error: error.message || "Supabase error" }),
      };
    }

    return {
      statusCode: 200,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS, DELETE",
        "Access-Control-Allow-Headers": "Content-Type",
      },
      body: JSON.stringify({ message: "User deleted successfully" }),
    };
  }

  return {
    statusCode: 405,
    body: JSON.stringify({ error: "Method Not Allowed" }),
  };
};

package.json
{
  "name": "server",
  "version": "1.0.0",
  "description": "Serverless functions for Kepner-Tregoe app",
  "scripts": {},
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@supabase/supabase-js": "^2.48.1",
    "cookie": "^1.0.2"
  }
}
=======
netlify.toml
[build]
  functions = "netlify/functions"
=======
=======
